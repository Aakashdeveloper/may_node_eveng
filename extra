https://code.visualstudio.com/ 
https://github.com/
 https://nodejs.org/en/ 
https://github.com/Aakashdeveloper
https://www.youtube.com/channel/UC26NMdgQBbY6wunk_vZwQZQ/videos?view_as=subscriber
https://github.com/Aakashdeveloper/may_node_eveng

Basic JavaScript
NPM
Basic NodeJS(in built)(Os,file,http)
NodeJS(full Stack App) (Node-EJS-Mongo-Express)
Third Party Api (Weather Api)
Node-Es6(.babel)
Redis
Email With Node(Sendgrid)
MongoDb Basic
Api with NodeJS(Rest)
Oauth(with github)> SSO
DashBoard(Crud)
Login/Logout(JWT)
Production Pm2
OO_NodeJs
NodeJs with postgres
Testing
GraphQl API
ChatApp
Nginx
Docker


//Open Source///
node_modules
depedency
package

NPM> Node Package Manager

//////////////////
Local depedency >  local to folder/app
Global depedency > local to system
////////////////

///////////////////
Local depedency
 > normal
 > dev
///////////////////


///////
Package.json
////////
> command to start stop build test
> depedency management
> meta data(about)

JSON> JavaScript Object Notation
[
    {
        name:"Ammy"
        rollno:1
    },
    {
        name:"Jackson"
        rollno:2,
        city:"Delhi"
    }
]


////////////////////////////
Step to create package.json
/////////////////////////////
**NodeJs must be install in your system
> navigate to folder using cmd where you want to generate
> npm init
> Answer all Question
> type yes



////////////////////////////
Step to install localpackage
/////////////////////////////
> navigate to folder using cmd where you want to install
> npm i body-parser/ npm install body-parser


//////Dev///////
> navigate to folder using cmd where you want to install
> npm i mocha --save-dev

------------15/5/2020---------


///Basic Node Package///
Os
fs

http
Static Api


callback


///////To Cont. development/////
>>Win 
> Run cmd as admin
> npm i -g nodemon

>Mac/Linux
> Open Terminal
> sudo npm i -g nodemon

npm run dev

////////
Express

echo 'export PORT='9900'>dev.env
source ./dev.env

///Menu
///Details
///MongoDB


function add(a,b){
    return a+b
}

add(2,3)

---------------
Install mongodb

Window
> C:\data\db


Mac
sudo mkdir /System/Volumes/Data/data/db

linux
sudo mkdir /data/db

Window
C:/data/db

How to run mongodb
> Open two terminal 
    1> Mongo server (should alawys running)
    2> Mongo console ( To test query)

Use cmd and naviagte
> C:/Program/Mongo/3.4/bin
> mongod  (mongodb server)

>Use cmd and naviagte
> C:Program/Mongo/4.2/bin
> mongod (to start server)
> mongo (to connect with console)

Mac
> Open Terminal
> sudo mongod --dbpath /System/Volumes/Data/data/db
> Open Terminal
> mongo

linux
> Open Terminal
> sudo mongod --dbpath /data/db
> Open Terminal
> mongo

Default Port
(27017)



lodash


npm i @babel/core @babel/register @babel/preset-env

//////////////////
Redis
///////////////

redis-server
redis-cli
KEYS *
get keyname

set developerfunnel mockinterview
get developerfunnel


////////////
Github
////////////////
>>>>>>First Time <<<<<
git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/Aakashdeveloper/narrshit.git
git push -u origin master

git add .
git commit -m "first commit"
git push

git checkout -b home/api


/////
 npm i express cors mongodb mongoose jsonwebtoken body-parser bcryptjs


 ///Pm2///
 npm i -g pm2
 pm2 start startfile
 pm2 list
 pm2 stop appname

 {
  product(id:3){
    name,
    rating
  }
}

json-server
json-server --watch db.json --port 8900

mutation{
  addProduct(
    id:7,
    name:"DEF",,
    locality:"Delhi"
  ){
    id
  }
}


docker build . -t mynodemay 
docker run -p 9889:9600 mynodemay


server {
        listen       8082;
        server_name  localhost;

        location / {
            proxy_pass http://127.0.0.1:8900;
            proxy_http_version 1.1;
    	      proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }


 #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}